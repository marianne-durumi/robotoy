{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundary.js","containers/App.js","reportWebVitals.js","index.js"],"names":["Card","id","name","email","className","src","alt","CardList","robots","map","user","i","username","SearchBox","searchChange","type","placeholder","onChange","Scroll","children","style","overflowY","border","height","ErrorBoundary","props","state","hasError","error","info","this","setstate","Component","App","onSearchChange","event","setState","searchfield","target","value","fetch","then","response","json","users","filteredRobots","filter","robot","toLowerCase","includes","length","React","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2NAmBeA,EAhBF,SAAC,GAAD,IAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,KAAMC,EAAb,EAAaA,MAAb,OACX,sBAAKC,UAAU,sDAAf,UACE,qBAAKC,IAAG,+BAA0BJ,EAA1B,iBAA6CK,IAAI,WACzD,gCACE,6BAAKJ,IACL,4BAAIC,WCKKI,EAVE,SAAC,GAAD,IAAGC,EAAH,EAAGA,OAAH,OACfA,EAAOC,KAAI,SAACC,EAAMC,GAAP,OACT,cAAC,EAAD,CAEEV,GAAIO,EAAOG,GAAGV,GACdC,KAAMM,EAAOG,GAAGT,KAChBC,MAAOK,EAAOG,GAAGR,OAHZK,EAAOG,GAAGC,cCQNC,EAXG,SAAC,GAAD,IAAGC,EAAH,EAAGA,aAAH,OAChB,qBAAKV,UAAU,MAAf,SACE,uBACEA,UAAU,mCACVW,KAAK,SACLC,YAAY,gBACZC,SAAUH,OCUDI,EAhBA,SAAC,GAAD,IAAGC,EAAH,EAAGA,SAAH,OACb,qBACEC,MAAO,CACLC,UAAW,SACXC,OAAQ,kBACRC,OAAQ,SAJZ,SAOGJ,KCmBUK,E,kDAzBb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CACXC,UAAU,GAHK,E,8DAODC,EAAOC,GACvBC,KAAKC,SAAS,CAAEJ,UAAU,M,+BAGlB,IACAA,EAAaG,KAAKJ,MAAlBC,SACAR,EAAaW,KAAKL,MAAlBN,SACR,OAAIQ,EACK,uCAEFR,M,GAlBiBa,aC8CbC,G,wDA1Cb,aAAe,IAAD,8BACZ,gBAeFC,eAAiB,SAACC,GAChB,EAAKC,SAAS,CAAEC,YAAaF,EAAMG,OAAOC,SAf1C,EAAKb,MAAQ,CACXlB,OAAQ,GACR6B,YAAa,IAJH,E,gEAQO,IAAD,OAClBG,MAAM,8CACHC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACG,GAAD,OAAW,EAAKR,SAAS,CAAE5B,OAAQoC,S,+BAUnC,IAAD,EACyBd,KAAKJ,MAA7BlB,EADD,EACCA,OAAQ6B,EADT,EACSA,YACVQ,EAAiBrC,EAAOsC,QAAO,SAACC,GAAD,OACnCA,EAAM7C,KAAK8C,cAAcC,SAASZ,EAAYW,kBAEhD,OAAQxC,EAAO0C,OAGb,sBAAK9C,UAAU,KAAf,UACE,oBAAIA,UAAU,KAAd,yBACA,cAAC,EAAD,CAAWU,aAAcgB,KAAKI,iBAC9B,cAAC,EAAD,UACE,cAAC,EAAD,UACE,cAAC,EAAD,CAAU1B,OAAQqC,WAPxB,6C,GA5BYM,IAAMnB,YCKToB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBb,MAAK,YAAkD,IAA/Cc,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,O,YCAdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.2eb41863.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Card = ({ id, name, email }) => (\r\n  <div className=\"tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5\">\r\n    <img src={`https://robohash.org/${id}?size=200x200`} alt=\"robots\" />\r\n    <div>\r\n      <h2>{name}</h2>\r\n      <p>{email}</p>\r\n    </div>\r\n  </div>\r\n);\r\n\r\nCard.propTypes = {\r\n  id: PropTypes.number.isRequired,\r\n  name: PropTypes.string.isRequired,\r\n  email: PropTypes.string.isRequired,\r\n};\r\n\r\nexport default Card;\r\n","import React from 'react';\nimport Card from './Card';\n\nconst CardList = ({ robots }) =>\n  robots.map((user, i) => (\n    <Card\n      key={robots[i].username}\n      id={robots[i].id}\n      name={robots[i].name}\n      email={robots[i].email}\n    />\n  ));\n\nexport default CardList;\n","/* eslint-disable react/prop-types */\r\nimport React from 'react';\r\n\r\nconst SearchBox = ({ searchChange }) => (\r\n  <div className=\"pa2\">\r\n    <input\r\n      className=\"pa3 ba b--green bg-lightest-blue\"\r\n      type=\"search\"\r\n      placeholder=\"search robots\"\r\n      onChange={searchChange}\r\n    />\r\n  </div>\r\n);\r\n\r\nexport default SearchBox;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Scroll = ({ children }) => (\r\n  <div\r\n    style={{\r\n      overflowY: 'scroll',\r\n      border: '5px solid black',\r\n      height: '800px',\r\n    }}\r\n  >\r\n    {children}\r\n  </div>\r\n);\r\n\r\nScroll.propTypes = {\r\n  children: PropTypes.node.isRequired,\r\n};\r\n\r\nexport default Scroll;\r\n","/* eslint-disable no-unused-vars */\r\nimport React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nclass ErrorBoundary extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      hasError: false,\r\n    };\r\n  }\r\n\r\n  componentDidCatch(error, info) {\r\n    this.setstate({ hasError: true });\r\n  }\r\n\r\n  render() {\r\n    const { hasError } = this.state;\r\n    const { children } = this.props;\r\n    if (hasError) {\r\n      return <h1>Ooops</h1>;\r\n    }\r\n    return children;\r\n  }\r\n}\r\n\r\nErrorBoundary.propTypes = {\r\n  children: PropTypes.node.isRequired,\r\n};\r\n\r\nexport default ErrorBoundary;\r\n","import React from 'react';\r\nimport CardList from '../components/CardList';\r\nimport SearchBox from '../components/SearchBox';\r\nimport Scroll from '../components/Scroll';\r\nimport ErrorBoundary from '../components/ErrorBoundary';\r\nimport './App.css';\r\n\r\nclass App extends React.Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      robots: [],\r\n      searchfield: '',\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    fetch('https://jsonplaceholder.typicode.com/users')\r\n      .then((response) => response.json())\r\n      .then((users) => this.setState({ robots: users }));\r\n  }\r\n  // componentDidMount에서 setState를 호출한느 경우 render함수가 두번 호출되므로\r\n  // 성능문제가 있을 수 있으므로 경우의 수를 파악해서 개발해야 한다.\r\n\r\n  onSearchChange = (event) => {\r\n    this.setState({ searchfield: event.target.value });\r\n  };\r\n  // input의 입력값이 달라질때마다 위 함수를 실행(searchfield의 내용 업데이트)\r\n\r\n  render() {\r\n    const { robots, searchfield } = this.state;\r\n    const filteredRobots = robots.filter((robot) =>\r\n      robot.name.toLowerCase().includes(searchfield.toLowerCase()),\r\n    );\r\n    return !robots.length ? (\r\n      <h1>Loading</h1>\r\n    ) : (\r\n      <div className=\"tc\">\r\n        <h1 className=\"f1\">RoboFriends</h1>\r\n        <SearchBox searchChange={this.onSearchChange} />\r\n        <Scroll>\r\n          <ErrorBoundary>\r\n            <CardList robots={filteredRobots} />\r\n          </ErrorBoundary>\r\n        </Scroll>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './containers/App';\nimport reportWebVitals from './reportWebVitals';\nimport './index.css';\nimport 'tachyons';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}